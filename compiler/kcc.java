package compiler;

import org.antlr.v4.runtime.CharStreams;
import lexparse.KnightCodeLexer;
import lexparse.KnightCodeParser;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import java.nio.file.Files;
import java.nio.file.Paths;

public class kcc {
    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java compiler.kcc <inputFile.kc> <outputFile.class>");
            return;
        }
        String inputFile = args[0];
        String outputFile = args[1];
        
        try {
            // Setup ANTLR input stream from the provided file
            var input = CharStreams.fromFileName(inputFile);

            // Initialize the lexer and parser
            var lexer = new KnightCodeLexer(input);
            var tokens = new CommonTokenStream(lexer);
            var parser = new KnightCodeParser(tokens);

            // Generate the parse tree
            ParseTree tree = parser.file(); // Assuming 'file' is the root rule in your grammar

            // Initialize your custom visitor and BytecodeGenerator
            KccVisitor visitor = new KccVisitor();
            // Extract the class name from the outputFile argument
            String className = extractClassName(outputFile);
            // Configure the BytecodeGenerator with the class name
            visitor.getBytecodeGenerator().startClass(className);
            // Visit the parse tree to generate bytecode
            visitor.visit(tree);

            // Retrieve the generated bytecode and write it to the specified outputFile
            byte[] bytecode = visitor.getBytecodeGenerator().getBytecode();
            Files.write(Paths.get(outputFile), bytecode);
            System.out.println("Bytecode successfully written to " + outputFile);

        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Error processing input file: " + inputFile);
        }
    }

    private static String extractClassName(String outputFile) {
        // Extracts the file name without extension from the outputFile path
        String fileName = new java.io.File(outputFile).getName();
        int dotIndex = fileName.lastIndexOf('.');
        return dotIndex == -1 ? fileName : fileName.substring(0, dotIndex);
    }
}
