package compiler;

import org.antlr.v4.runtime.CharStreams;
import lexparse.KnightCodeLexer;
import lexparse.KnightCodeParser;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import java.nio.file.Files;
import java.nio.file.Paths;

public class kcc {
    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java compiler.kcc <inputFile.kc> <outputFile.class>");
            return;
        }
        String inputFile = args[0];
        String outputFile = args[1];
        
        
        try {
            var input = CharStreams.fromFileName(inputFile);

            // Initialize the lexer and parser
            var lexer = new KnightCodeLexer(input);
            var tokens = new CommonTokenStream(lexer);
            var parser = new KnightCodeParser(tokens);

            // Generate the parse tree
            ParseTree tree = parser.file(); 

            // Initialize SymbolTable and BytecodeGenerator
            SymbolTable symbolTable = new SymbolTable();
            BytecodeGenerator bytecodeGenerator = new BytecodeGenerator();

            String className = extractClassName(outputFile);
            bytecodeGenerator.startClass(className); // Initialize class generation
            bytecodeGenerator.startMainMethod();

            // Instantiate KccVisitor with SymbolTable and BytecodeGenerator
            KccVisitor visitor = new KccVisitor(symbolTable, bytecodeGenerator);
            
            // Visit the parse tree to generate bytecode
            visitor.visit(tree);
            
            // Finalize the main method and class generation
            bytecodeGenerator.finalizeMainMethod(); 
            byte[] bytecode = bytecodeGenerator.getBytecode(); 
            
            // Write the generated bytecode to the specified output file
            Files.write(Paths.get(outputFile), bytecode);
            System.out.println("Bytecode successfully written to " + outputFile);
            System.out.println(symbolTable);

        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Error processing input file: " + inputFile);
        }
        
    }

    private static String extractClassName(String outputFile) {
        String fileName = new java.io.File(outputFile).getName();
        int dotIndex = fileName.lastIndexOf('.');
        return dotIndex == -1 ? fileName : fileName.substring(0, dotIndex);
    }
}

